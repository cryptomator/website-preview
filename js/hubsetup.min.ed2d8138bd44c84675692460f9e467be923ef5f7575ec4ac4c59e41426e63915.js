"use strict";class HubSetup{static defaultConfig(){return{compose:{includeTraefik:!1,publicNetwork:"srv"},k8s:{namespace:"default",includeIngress:!1},db:{adminPw:HubSetup.uuid(),keycloakPw:HubSetup.uuid(),hubPw:HubSetup.uuid()},keycloak:{useExternal:!1,publicUrl:"https://domain.tld/kc",adminUser:"admin",adminPw:"admin",realmId:"cryptomator"},hub:{version:"stable",publicUrl:"https://domain.tld",adminUser:"admin",adminPw:"admin",syncerUser:"syncer",syncerPw:HubSetup.uuid()}}}static generateOutput(e){return{k8s:HubSetup.writeHeader(e)+HubSetup.writeK8sConfig(e),compose:HubSetup.writeHeader(e)+HubSetup.writeComposeConfig(e),realm:HubSetup.writeRealmConfig(e)}}static writeComposeConfig(e){try{return new DockerComposeConfigBuilder(e).build()}catch(e){return`---
GENERATING CONFIG FAILED
---
${e}`}}static writeK8sConfig(e){try{return new KubernetesConfigBuilder(e).build()}catch(e){return`---
GENERATING CONFIG FAILED
---
${e}`}}static writeRealmConfig(e){try{let t=new ConfigBuilder(e).getRealmConfig();return JSON.stringify(t,null,2)}catch(e){return`---
GENERATING CONFIG FAILED
---
${e}`}}static writeHeader(e){let n=new ConfigBuilder(e),s=n.getHostname(e.keycloak.publicUrl)=="localhost",o=n.getPathname(e.keycloak.publicUrl)=="/kc",t=`# Template for Cryptomator Hub deployment according to your specifications.

`;return!s&&o&&(t+="# If for some reason you later change any of the following environment variables, make sure to remove `--optimized` from the keycloak command, otherwise it will not start:\n",t+=`#  * KC_DB
#  * KC_HEALTH_ENABLED
#  * KC_HTTP_RELATIVE_PATH

`),t+=`# Generated using script version 1

`,t}static uuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){let t=Math.random()*16|0,n=e=="x"?t:t&3|8;return n.toString(16)})}static getPort(e){try{let t=new URL(e),n=Number.parseInt(t.port),s=t.protocol=="https:"?443:80;return Number.isNaN(n)?s:n}catch{return-1}}static urlWithTrailingSlash(e){try{let t=new URL(e);return t.pathname.endsWith("/")||(t.pathname+="/"),t.href}catch{return"<invalid-url>"}}}class ConfigBuilder{constructor(e){this.cfg=e}getPort(e){let t=new URL(e),n=Number.parseInt(t.port),s=t.protocol=="https:"?443:80;return Number.isNaN(n)?s:n}getHostname(e){let t=new URL(e);return t.hostname}getPathname(e){let t=new URL(e);return t.pathname}getPathnameWithTrailingSlash(e){let t=new URL(e);return t.pathname.endsWith("/")||(t.pathname+="/"),t.pathname}getInitDbSQL(){let e=[];return this.cfg.keycloak.useExternal||e.push(`CREATE USER keycloak WITH ENCRYPTED PASSWORD '${this.cfg.db.keycloakPw}';
CREATE DATABASE keycloak WITH ENCODING 'UTF8';
GRANT ALL PRIVILEGES ON DATABASE keycloak TO keycloak;`),e.push(`CREATE USER hub WITH ENCRYPTED PASSWORD '${this.cfg.db.hubPw}';
CREATE DATABASE hub WITH ENCODING 'UTF8';
GRANT ALL PRIVILEGES ON DATABASE hub TO hub;`),e.join(`
`)}getRealmConfig(){return{id:crypto.randomUUID(),realm:this.cfg.keycloak.realmId,displayName:"Cryptomator Hub",loginTheme:"cryptomator",enabled:!0,sslRequired:"external",defaultRole:{name:"user",description:"User"},roles:{realm:[{name:"user",description:"User",composite:!1},{name:"admin",description:"Administrator",composite:!0,composites:{realm:["user"],client:{"realm-management":["realm-admin"]}}},{name:"syncer",description:"syncer",composite:!0,composites:{client:{"realm-management":["view-users"]}}}]},users:[{username:this.cfg.hub.adminUser,enabled:!0,credentials:[{type:"password",value:this.cfg.hub.adminPw,temporary:!0}],requiredActions:["UPDATE_PASSWORD"],realmRoles:["admin"]},{username:this.cfg.hub.syncerUser,enabled:!0,credentials:[{type:"password",value:this.cfg.hub.syncerPw,temporary:!1}],realmRoles:["syncer"]}],scopeMappings:[{client:"cryptomatorhub",roles:["user","admin"]}],clients:[{clientId:"cryptomatorhub",serviceAccountsEnabled:!1,publicClient:!0,name:"Cryptomator Hub",enabled:!0,redirectUris:[new URL("*",HubSetup.urlWithTrailingSlash(this.cfg.hub.publicUrl)).href],webOrigins:["+"],bearerOnly:!1,frontchannelLogout:!1,protocol:"openid-connect",attributes:{"pkce.code.challenge.method":"S256"},protocolMappers:[{name:"realm roles",protocol:"openid-connect",protocolMapper:"oidc-usermodel-realm-role-mapper",consentRequired:!1,config:{"access.token.claim":"true","claim.name":"realm_access.roles","jsonType.label":"String",multivalued:"true"}},{name:"client roles",protocol:"openid-connect",protocolMapper:"oidc-usermodel-client-role-mapper",consentRequired:!1,config:{"access.token.claim":"true","claim.name":"resource_access.${client_id}.roles","jsonType.label":"String",multivalued:"true"}}]},{clientId:"cryptomator",serviceAccountsEnabled:!1,publicClient:!0,name:"Cryptomator App",enabled:!0,redirectUris:["http://127.0.0.1/*"],webOrigins:["+"],bearerOnly:!1,frontchannelLogout:!1,protocol:"openid-connect",attributes:{"pkce.code.challenge.method":"S256"}}],browserSecurityHeaders:{contentSecurityPolicy:`frame-src 'self'; frame-ancestors 'self' ${HubSetup.urlWithTrailingSlash(this.cfg.hub.publicUrl)}; object-src 'none';`}}}}class DockerComposeConfigBuilder extends ConfigBuilder{constructor(e){super(e)}build(){return jsyaml.dump({...this.cfg.compose.includeTraefik&&{networks:{"hub-internal":{}}},services:{"init-config":this.getInitConfigService(),postgres:this.getPostgresService(),...!this.cfg.keycloak.useExternal&&{keycloak:this.getKeycloakService()},hub:this.getHubService()},volumes:{...!this.cfg.keycloak.useExternal&&{"kc-config":{}},"db-init":{},"db-data":{}}},{lineWidth:-1})}getInitConfigService(){let e=`cat >/db-init/initdb.sql << 'EOF'
${this.getInitDbSQL()}
EOF`;if(this.cfg.keycloak.useExternal)return{image:"bash:5",volumes:["db-init:/db-init"],command:["bash","-c",e]};let t=`cat >/kc-config/realm.json << 'EOF'
${JSON.stringify(this.getRealmConfig(),null,2).replaceAll("$","$$$$")}
EOF`;return{image:"bash:5",volumes:["kc-config:/kc-config","db-init:/db-init"],command:["bash","-c",e+`
`+t]}}getPostgresService(){return{depends_on:{"init-config":{condition:"service_completed_successfully"}},image:"postgres:14-alpine",volumes:["db-init:/docker-entrypoint-initdb.d","db-data:/var/lib/postgresql/data"],deploy:{resources:{limits:{cpus:"1.0",memory:"256M"}}},healthcheck:{test:["CMD","pg_isready","-U","postgres"],interval:"10s",timeout:"3s"},restart:"unless-stopped",environment:{POSTGRES_PASSWORD:this.cfg.db.adminPw,POSTGRES_INITDB_ARGS:"--encoding=UTF8"},...this.cfg.compose.includeTraefik&&{networks:["hub-internal"],labels:["traefik.enable=false"]}}}getKeycloakService(){let t=this.getHostname(this.cfg.keycloak.publicUrl)=="localhost",n=this.getPathname(this.cfg.keycloak.publicUrl)=="/kc",e;return t?e="start-dev --import-realm":n?e="start --optimized --import-realm":e="start --import-realm",{depends_on:{"init-config":{condition:"service_completed_successfully"},postgres:{condition:"service_healthy"}},image:"ghcr.io/cryptomator/keycloak:20.0.3",command:e,volumes:["kc-config:/opt/keycloak/data/import"],deploy:{resources:{limits:{cpus:"1.0",memory:"1024M"}}},...!this.cfg.compose.includeTraefik&&{ports:[`${this.getPort(this.cfg.keycloak.publicUrl)}:8080`]},healthcheck:{test:["CMD","curl","-f",`http://localhost:8080${this.getPathname(HubSetup.urlWithTrailingSlash(this.cfg.keycloak.publicUrl))}health/live`],interval:"60s",timeout:"3s"},restart:"unless-stopped",environment:{KEYCLOAK_ADMIN:this.cfg.keycloak.adminUser,KEYCLOAK_ADMIN_PASSWORD:this.cfg.keycloak.adminPw,KC_DB:"postgres",KC_DB_URL:"jdbc:postgresql://postgres:5432/keycloak",KC_DB_USERNAME:"keycloak",KC_DB_PASSWORD:this.cfg.db.keycloakPw,KC_HEALTH_ENABLED:"true",KC_HOSTNAME:t?null:this.getHostname(this.cfg.keycloak.publicUrl),KC_HTTP_ENABLED:"true",KC_PROXY:"edge",KC_HTTP_RELATIVE_PATH:this.getPathname(this.cfg.keycloak.publicUrl)},...this.cfg.compose.includeTraefik&&this.getTraefikConfig(this.cfg.keycloak.publicUrl,"kc")}}getHubService(){return{depends_on:{...!this.cfg.keycloak.useExternal&&{keycloak:{condition:"service_healthy"}},postgres:{condition:"service_healthy"}},image:`ghcr.io/cryptomator/hub:${this.cfg.hub.version}`,deploy:{resources:{limits:{cpus:"1.0",memory:"512M"}}},...!this.cfg.compose.includeTraefik&&{ports:[`${this.getPort(this.cfg.hub.publicUrl)}:8080`]},healthcheck:{test:["CMD","curl","-f","http://localhost:8080/q/health/live"],interval:"10s",timeout:"3s"},restart:"unless-stopped",environment:{HUB_PUBLIC_ROOT_PATH:this.getPathnameWithTrailingSlash(this.cfg.hub.publicUrl),HUB_KEYCLOAK_PUBLIC_URL:this.cfg.keycloak.publicUrl,HUB_KEYCLOAK_LOCAL_URL:this.cfg.keycloak.useExternal?this.cfg.keycloak.publicUrl:`http://keycloak:8080${this.getPathname(this.cfg.keycloak.publicUrl)}`,HUB_KEYCLOAK_REALM:this.cfg.keycloak.realmId,HUB_KEYCLOAK_SYNCER_USERNAME:this.cfg.hub.syncerUser,HUB_KEYCLOAK_SYNCER_PASSWORD:this.cfg.hub.syncerPw,HUB_KEYCLOAK_SYNCER_CLIENT_ID:"admin-cli",HUB_KEYCLOAK_SYNCER_PERIOD:"5m",HUB_KEYCLOAK_OIDC_CRYPTOMATOR_CLIENT_ID:"cryptomator",QUARKUS_OIDC_AUTH_SERVER_URL:new URL(`realms/${this.cfg.keycloak.realmId}`,HubSetup.urlWithTrailingSlash(this.cfg.keycloak.useExternal?this.cfg.keycloak.publicUrl:`http://keycloak:8080${this.getPathname(this.cfg.keycloak.publicUrl)}`)).href,QUARKUS_OIDC_TOKEN_ISSUER:new URL(`realms/${this.cfg.keycloak.realmId}`,HubSetup.urlWithTrailingSlash(this.cfg.keycloak.publicUrl)).href,QUARKUS_OIDC_CLIENT_ID:"cryptomatorhub",QUARKUS_DATASOURCE_JDBC_URL:"jdbc:postgresql://postgres:5432/hub",QUARKUS_DATASOURCE_USERNAME:"hub",QUARKUS_DATASOURCE_PASSWORD:this.cfg.db.hubPw,QUARKUS_HTTP_HEADER__CONTENT_SECURITY_POLICY__VALUE:`default-src 'self'; connect-src 'self' api.cryptomator.org ${this.cfg.keycloak.publicUrl}; object-src 'none'; child-src 'self'; img-src * data:; frame-ancestors 'none'`},...this.cfg.compose.includeTraefik&&this.getTraefikConfig(this.cfg.hub.publicUrl,"hub")}}getTraefikConfig(e,t){let o=this.getHostname(e),n=this.getPathname(e),s=`traefik.http.routers.${t}.rule=Host(\`${o}\`)`;return n!="/"&&(s+=` && PathPrefix(\`${n}\`)`),{networks:[this.cfg.compose.publicNetwork,"hub-internal"],labels:["traefik.enable=true",s,`traefik.http.services.${t}.loadbalancer.server.port=8080`]}}}class KubernetesConfigBuilder extends ConfigBuilder{constructor(e){super(e)}build(){let e="";return this.cfg.k8s.namespace!="default"&&(e+=`# Namespace
`,e+=jsyaml.dump({apiVersion:"v1",kind:"Namespace",metadata:{name:this.cfg.k8s.namespace}},{lineWidth:-1}),e+=`
---
`),e+=`# Configuration
`,e+=this.getSecrets(),e+=`
---
`,e+=`# PVCs
`,e+=this.getPVCs(),e+=`
---
`,e+=`# Postgres
`,e+=this.getPostgresDeployment(),e+=`
---
`,this.cfg.keycloak.useExternal||(e+=`# Keycloak
`,e+=this.getKeycloakDeployment(),e+=`
---
`),e+=`# Cryptomator Hub
`,e+=this.getHubDeployment(),e+=`
---
`,e+=`# Services 
`,e+=this.getHubService(),e+=`
---
`,this.cfg.keycloak.useExternal||(e+=this.getKeycloakService(),e+=`
---
`),e+=this.getPostgresService(),e+=`
---
`,this.cfg.k8s.includeIngress&&(e+=`# Ingress
`,e+=this.getIngress(),e+=`
---
`),e}getSecrets(){let e=this.getRealmConfig(),t={apiVersion:"v1",kind:"Secret",metadata:{namespace:this.cfg.k8s.namespace,name:"hub-secrets"},type:"Opaque",stringData:{...!this.cfg.keycloak.useExternal&&{kc_admin_user:this.cfg.keycloak.adminUser},...!this.cfg.keycloak.useExternal&&{kc_admin_pass:this.cfg.keycloak.adminPw},db_admin_pass:this.cfg.db.adminPw,db_hub_pass:this.cfg.db.hubPw,...!this.cfg.keycloak.useExternal&&{db_kc_pass:this.cfg.db.keycloakPw},hub_syncer_user:this.cfg.hub.syncerUser,hub_syncer_pass:this.cfg.hub.syncerPw,"initdb.sql":this.getInitDbSQL(),...!this.cfg.keycloak.useExternal&&{"realm.json":JSON.stringify(e,null,2)}}};return jsyaml.dump(t,{lineWidth:-1})}getPVCs(){let e={apiVersion:"v1",kind:"PersistentVolumeClaim",metadata:{namespace:this.cfg.k8s.namespace,name:"dbdata-pvc"},spec:{accessModes:["ReadWriteOnce"],resources:{requests:{storage:"1G"}}}};return jsyaml.dump(e,{lineWidth:-1})}getHubDeployment(){let e={apiVersion:"apps/v1",kind:"Deployment",metadata:{name:"cryptomator-hub",namespace:this.cfg.k8s.namespace,labels:{app:"cryptomator-hub"}},spec:{replicas:1,selector:{matchLabels:{app:"cryptomator-hub"}},template:{metadata:{labels:{app:"cryptomator-hub"}},spec:{initContainers:[{name:"wait-for-postgres",image:"busybox",args:["/bin/sh","-c",'set -x; while ! nc -zw 10 postgres-svc:5432; do echo "waiting for postgres..."; done']},...this.cfg.keycloak.useExternal?[]:[{name:"wait-for-keycloak",image:"busybox",args:["/bin/sh","-c",`set -x; while ! wget -q --spider "http://keycloak-svc:8080${this.getPathname(HubSetup.urlWithTrailingSlash(this.cfg.keycloak.publicUrl))}health/live" 2>>/dev/null; do sleep 10; done`]}]],containers:[{name:"cryptomator-hub",image:`ghcr.io/cryptomator/hub:${this.cfg.hub.version}`,imagePullPolicy:"Always",ports:[{containerPort:8080}],resources:{requests:{cpu:"25m",memory:"256Mi"},limits:{cpu:"1000m",memory:"512Mi"}},startupProbe:{httpGet:{path:"/q/health/started",port:8080}},livenessProbe:{httpGet:{path:"/q/health/live",port:8080}},env:[{name:"HUB_PUBLIC_ROOT_PATH",value:this.getPathnameWithTrailingSlash(this.cfg.hub.publicUrl)},{name:"HUB_KEYCLOAK_PUBLIC_URL",value:this.cfg.keycloak.publicUrl},{name:"HUB_KEYCLOAK_LOCAL_URL",value:this.cfg.keycloak.useExternal?this.cfg.keycloak.publicUrl:`http://keycloak-svc:8080${this.getPathname(this.cfg.keycloak.publicUrl)}`},{name:"HUB_KEYCLOAK_REALM",value:this.cfg.keycloak.realmId},{name:"HUB_KEYCLOAK_SYNCER_USERNAME",valueFrom:{secretKeyRef:{name:"hub-secrets",key:"hub_syncer_user"}}},{name:"HUB_KEYCLOAK_SYNCER_PASSWORD",valueFrom:{secretKeyRef:{name:"hub-secrets",key:"hub_syncer_pass"}}},{name:"HUB_KEYCLOAK_SYNCER_CLIENT_ID",value:"admin-cli"},{name:"HUB_KEYCLOAK_SYNCER_PERIOD",value:"5m"},{name:"HUB_KEYCLOAK_OIDC_CRYPTOMATOR_CLIENT_ID",value:"cryptomator"},{name:"QUARKUS_OIDC_AUTH_SERVER_URL",value:new URL(`realms/${this.cfg.keycloak.realmId}`,HubSetup.urlWithTrailingSlash(this.cfg.keycloak.useExternal?this.cfg.keycloak.publicUrl:`http://keycloak-svc:8080${this.getPathname(this.cfg.keycloak.publicUrl)}`)).href},{name:"QUARKUS_OIDC_TOKEN_ISSUER",value:new URL(`realms/${this.cfg.keycloak.realmId}`,HubSetup.urlWithTrailingSlash(this.cfg.keycloak.publicUrl)).href},{name:"QUARKUS_OIDC_CLIENT_ID",value:"cryptomatorhub"},{name:"QUARKUS_DATASOURCE_JDBC_URL",value:"jdbc:postgresql://postgres-svc:5432/hub"},{name:"QUARKUS_DATASOURCE_USERNAME",value:"hub"},{name:"QUARKUS_DATASOURCE_PASSWORD",valueFrom:{secretKeyRef:{name:"hub-secrets",key:"db_hub_pass"}}},...this.cfg.keycloak.useExternal||this.getHostname(this.cfg.hub.publicUrl)!=this.getHostname(this.cfg.keycloak.publicUrl)?[{name:"QUARKUS_HTTP_HEADER__CONTENT_SECURITY_POLICY__VALUE",value:`default-src 'self'; connect-src 'self' api.cryptomator.org ${this.cfg.keycloak.publicUrl}; object-src 'none'; child-src 'self'; img-src * data:; frame-ancestors 'none'`}]:[]]}]}}}};return jsyaml.dump(e,{lineWidth:-1})}getPostgresDeployment(){let e={apiVersion:"apps/v1",kind:"Deployment",metadata:{name:"postgres",namespace:this.cfg.k8s.namespace,labels:{app:"postgres"}},spec:{replicas:1,selector:{matchLabels:{app:"postgres"}},template:{metadata:{labels:{app:"postgres"}},spec:{containers:[{name:"postgres",image:"postgres:14-alpine",ports:[{containerPort:5432}],resources:{requests:{cpu:"25m",memory:"64Mi"},limits:{cpu:"1000m",memory:"256Mi"}},livenessProbe:{exec:{command:["pg_isready","-U","postgres"]}},env:[{name:"POSTGRES_INITDB_ARGS",value:"--encoding=UTF8"},{name:"POSTGRES_PASSWORD",valueFrom:{secretKeyRef:{name:"hub-secrets",key:"db_admin_pass"}}}],volumeMounts:[{name:"secrets-vol",mountPath:"/docker-entrypoint-initdb.d/initdb.sql",subPath:"initdb.sql",readOnly:!0},{name:"dbdata-vol",mountPath:"/var/lib/postgresql/data",subPath:"data"}]}],volumes:[{name:"secrets-vol",secret:{secretName:"hub-secrets"}},{name:"dbdata-vol",persistentVolumeClaim:{claimName:"dbdata-pvc"}}]}}}};return jsyaml.dump(e,{lineWidth:-1})}getKeycloakDeployment(){let t=this.getHostname(this.cfg.keycloak.publicUrl)=="localhost",s=this.getPathname(this.cfg.keycloak.publicUrl)=="/kc",e;t?e=["/opt/keycloak/bin/kc.sh","start-dev","--import-realm"]:s?e=["/opt/keycloak/bin/kc.sh","start","--optimized","--import-realm"]:e=["/opt/keycloak/bin/kc.sh","start","--import-realm"];let n=[{name:"KEYCLOAK_ADMIN",valueFrom:{secretKeyRef:{name:"hub-secrets",key:"kc_admin_user"}}},{name:"KEYCLOAK_ADMIN_PASSWORD",valueFrom:{secretKeyRef:{name:"hub-secrets",key:"kc_admin_pass"}}},{name:"KC_DB",value:"postgres"},{name:"KC_DB_URL",value:"jdbc:postgresql://postgres-svc:5432/keycloak"},{name:"KC_DB_USERNAME",value:"keycloak"},{name:"KC_DB_PASSWORD",valueFrom:{secretKeyRef:{name:"hub-secrets",key:"db_kc_pass"}}},{name:"KC_HEALTH_ENABLED",value:"true"},{name:"KC_HTTP_ENABLED",value:"true"},{name:"KC_PROXY",value:"edge"},{name:"KC_HTTP_RELATIVE_PATH",value:this.getPathname(this.cfg.keycloak.publicUrl)}];t||n.push({name:"KC_HOSTNAME",value:this.getHostname(this.cfg.keycloak.publicUrl)});let o={apiVersion:"apps/v1",kind:"Deployment",metadata:{name:"keycloak",namespace:this.cfg.k8s.namespace,labels:{app:"keycloak"}},spec:{replicas:1,selector:{matchLabels:{app:"keycloak"}},template:{metadata:{labels:{app:"keycloak"}},spec:{initContainers:[{name:"wait-for-postgres",image:"busybox",args:["/bin/sh","-c",'set -x; while ! nc -zw 10 postgres-svc:5432; do echo "waiting for postgres..."; done']}],containers:[{name:"keycloak",image:"ghcr.io/cryptomator/keycloak:20.0.3",command:e,ports:[{containerPort:8080}],resources:{requests:{cpu:"25m",memory:"512Mi"},limits:{cpu:"1000m",memory:"1024Mi"}},livenessProbe:{httpGet:{path:`${this.getPathname(HubSetup.urlWithTrailingSlash(this.cfg.keycloak.publicUrl))}health/live`,port:8080},initialDelaySeconds:120,periodSeconds:60},env:n,volumeMounts:[{name:"secrets-vol",mountPath:"/opt/keycloak/data/import/realm.json",subPath:"realm.json",readOnly:!0}]}],volumes:[{name:"secrets-vol",secret:{secretName:"hub-secrets"}}]}}}};return jsyaml.dump(o,{lineWidth:-1})}getHubService(){let e={apiVersion:"v1",kind:"Service",metadata:{namespace:this.cfg.k8s.namespace,name:"cryptomator-hub-svc"},spec:{selector:{app:"cryptomator-hub"},ports:[{protocol:"TCP",port:8080}]}};return jsyaml.dump(e,{lineWidth:-1})}getPostgresService(){let e={apiVersion:"v1",kind:"Service",metadata:{namespace:this.cfg.k8s.namespace,name:"postgres-svc"},spec:{selector:{app:"postgres"},ports:[{protocol:"TCP",port:5432}]}};return jsyaml.dump(e,{lineWidth:-1})}getKeycloakService(){let e={apiVersion:"v1",kind:"Service",metadata:{namespace:this.cfg.k8s.namespace,name:"keycloak-svc"},spec:{selector:{app:"keycloak"},ports:[{protocol:"TCP",port:8080}]}};return jsyaml.dump(e,{lineWidth:-1})}getIngress(){let e=this.getHostname(this.cfg.hub.publicUrl)==this.getHostname(this.cfg.keycloak.publicUrl),t={apiVersion:"networking.k8s.io/v1",kind:"Ingress",metadata:{namespace:this.cfg.k8s.namespace,name:"ingress"},spec:{rules:[{host:this.getHostname(this.cfg.hub.publicUrl),http:{paths:[{path:this.getPathname(this.cfg.hub.publicUrl),pathType:"Prefix",backend:{service:{name:"cryptomator-hub-svc",port:{number:8080}}}},...!this.cfg.keycloak.useExternal&&e?[{path:this.getPathname(this.cfg.keycloak.publicUrl),pathType:"Prefix",backend:{service:{name:"keycloak-svc",port:{number:8080}}}}]:[]]}},...!this.cfg.keycloak.useExternal&&!e?[{host:this.getHostname(this.cfg.keycloak.publicUrl),http:{paths:[{path:this.getPathname(this.cfg.keycloak.publicUrl),pathType:"Prefix",backend:{service:{name:"keycloak-svc",port:{number:8080}}}}]}}]:[]]}};return jsyaml.dump(t,{lineWidth:-1})}}